module DiscordBot
  module GenAI
    module Image
      ##
      # Holds the image generated by Stable Diffusion
      #
      class Response
        attr_reader :body, :options, :bot, :api

        def self.create(image_options:, bot:)
          response = new(
            image_options: image_options,
            bot:           bot
          )
          response.generate
        end

        def initialize(image_options:, bot:)
          @options = image_options
          @bot = bot
          @api = bot.api
        end

        def generate
          time_before = Time.current
          response = if options.base_image.present?
                       api.automatic1111.image_to_image(
                         image_options: options
                       )
                     else
                       api.automatic1111.text_to_image(
                         image_options: options
                       )
                     end
          time_after = Time.current
          @time_taken = time_after - time_before
          @body = JSON.parse(response.body)
          self
        end

        def nsfw?
          return true if @options.force_spoiler

          response = api.automatic1111.nsfw_check(
            input_image: content
          )
          # If image is present, then it was censored and thus is nsfw
          JSON.parse(response.body)['image'].present?
        end

        def about
          "#{options.about}" \
          "#{nsfw_content_warning}" \
          "\n#{time_taken}"
        end

        def content
          base64_content
        end

        def base64_content
          @body['images'].first
        end

        def base64_html_src
          return unless base64_content.present?

          "data:image/jpg;base64,#{base64_content}"
        end

        def file
          return unless base64_content.present?

          StringIO.new(Base64.decode64(base64_content))
        end

        private

        def time_taken
          "**Time Taken:** #{@time_taken.round} seconds " \
          "(#{(@time_taken * 1000).round}ms)"
        end

        def nsfw_content_warning
          return unless nsfw?

          "\n\n**-> CONTENT WARNING <-**\n" \
          '_This image may contain nsfw content. View only at your own ' \
          'discretion._'
        end
      end
    end
  end
end
