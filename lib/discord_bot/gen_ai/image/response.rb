module DiscordBot
  module StableDiffusion
    ##
    # Holds the image generated by Stable Diffusion
    #
    class Image
      # rubocop:disable Metrics/MethodLength
      def initialize(image_options:)
        @options = image_options
        time_before = Time.current
        response = if image_options.base_image.present?
                     DiscordBot::StableDiffusion::ApiRequest.image_to_image(
                       image_options: image_options
                     )
                   else
                     DiscordBot::StableDiffusion::ApiRequest.text_to_image(
                       image_options: image_options
                     )
                   end
        time_after = Time.current
        @time_taken = time_after - time_before
        @body = JSON.parse(response.body)
      end
      # rubocop:enable Metrics/MethodLength

      def nsfw?
        return true if @options.force_spoiler

        response = DiscordBot::StableDiffusion::ApiRequest.nsfw_check(
          input_image: content
        )
        # If image is present, then it was censored and thus is nsfw
        JSON.parse(response.body)['image'].present?
      end

      attr_reader :body, :options

      def about
        "#{options.about}" \
        "#{nsfw_content_warning}" \
        "\n#{time_taken}"
      end

      def content
        base64_content
      end

      def base64_content
        @body['images'].first
      end

      def base64_html_src
        return unless base64_content.present?

        "data:image/jpg;base64,#{base64_content}"
      end

      def file
        return unless base64_content.present?

        StringIO.new(Base64.decode64(base64_content))
      end

      private

      def time_taken
        "**Time Taken:** #{@time_taken.round} seconds " \
        "(#{(@time_taken * 1000).round}ms)"
      end

      def nsfw_content_warning
        return unless nsfw?

        "\n\n**-> CONTENT WARNING <-**\n" \
        '_This image may contain nsfw content. View only at your own ' \
        'discretion._'
      end
    end
  end
end
