module DiscordBot
  module GenAI
    module Voice
      ##
      # Holds the audio generated by MeloTTS
      #
      class Response
        attr_reader :content, :options, :time_taken, :bot, :logger, :api

        def self.create(voice_options:, bot:)
          response = new(
            voice_options: voice_options,
            bot: bot
          )
          response.generate
        end

        def initialize(voice_options:, bot:)
          @options = voice_options
          @bot = bot
          @api = bot.api
          @logger = bot.logger
        end

        def generate
          time_before = Time.current
          response = api.melotts.text_to_voice(
            voice_options: voice_options
          )
          time_after = Time.current
          @time_taken = time_after - time_before
          @content = response.body
        end

        def file
          return unless content.present?

          StringIO.new(content)
        end

        def tempfile
          return unless content.present?

          Tempfile.create(['voice', 'wav'], binmode: true) do |file|
            file.write(content)
            yield file
          end
        end

        # private

        # def time_taken
        #   "**Time Taken:** #{@time_taken.round} seconds " \
        #   "(#{(@time_taken * 1000).round}ms)"
        # end
      end
    end
  end
end
